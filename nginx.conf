events {}

http {

  server {
    listen 80;
    server_name directus.ftso.local;

    # Redirect HTTP -> HTTPS
    return 301 https://$host$request_uri;
  }

  server {
    listen 80;
    server_name next.ftso.local;

    # Redirect HTTP -> HTTPS
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;
    server_name directus.ftso.local;

    # Configura SSL
    ssl_certificate /etc/nginx/certs/directus.ftso.local.pem;
    ssl_certificate_key /etc/nginx/certs/directus.ftso.local-key.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Directus per richieste API
    location / {
        proxy_pass http://directus:8055; # Sostituisci con la porta del container Directus
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Opzionale: cache o timeout
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 60s;
    }
    
  }

  server {
    listen 443 ssl;
    server_name next.ftso.local;

    # Configura SSL
    ssl_certificate /etc/nginx/certs/next.ftso.local.pem;
    ssl_certificate_key /etc/nginx/certs/next.ftso.local-key.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Next.js per tutte le altre richieste
    location / {
      proxy_pass http://frontend:3000;
      proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # Forward X-Forwarded headers
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
    
  }

}
